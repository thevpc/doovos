/* Generated By:JavaCC: Do not edit this line. DShellParserImplTokenManager.java */
package org.doovos.shell.parser;

/**
 * Token Manager.
 */
public class DShellParserImplTokenManager implements DShellParserImplConstants {

    /**
     * Debug output.
     */
    public java.io.PrintStream debugStream = System.out;

    /**
     * Set debug output.
     */
    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0xfeL) != 0L) {
                    jjmatchedKind = 37;
                    return 84;
                }
                if ((active0 & 0x1e200L) != 0L)
                    return 84;
                if ((active0 & 0xa8000c00L) != 0L)
                    return 80;
                return -1;
            case 1:
                if ((active0 & 0x14804L) != 0L)
                    return 84;
                if ((active0 & 0xa00000faL) != 0L) {
                    jjmatchedKind = 37;
                    jjmatchedPos = 1;
                    return 84;
                }
                return -1;
            case 2:
                if ((active0 & 0xfaL) != 0L) {
                    if (jjmatchedPos != 2) {
                        jjmatchedKind = 37;
                        jjmatchedPos = 2;
                    }
                    return 84;
                }
                return -1;
            case 3:
                if ((active0 & 0xb2L) != 0L) {
                    jjmatchedKind = 37;
                    jjmatchedPos = 3;
                    return 84;
                }
                if ((active0 & 0x48L) != 0L)
                    return 84;
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 10:
                return jjStopAtPos(0, 32);
            case 38:
                jjmatchedKind = 10;
                return jjMoveStringLiteralDfa1_0(0xa8000800L);
            case 40:
                return jjStopAtPos(0, 25);
            case 41:
                return jjStopAtPos(0, 26);
            case 59:
                return jjStartNfaWithStates_0(0, 9, 84);
            case 60:
                jjmatchedKind = 17;
                return jjMoveStringLiteralDfa1_0(0xc0000L);
            case 61:
                jjmatchedKind = 8;
                return jjMoveStringLiteralDfa1_0(0x1000L);
            case 62:
                jjmatchedKind = 20;
                return jjMoveStringLiteralDfa1_0(0x600000L);
            case 64:
                jjmatchedKind = 13;
                return jjMoveStringLiteralDfa1_0(0x4000L);
            case 98:
                return jjMoveStringLiteralDfa1_0(0x20L);
            case 101:
                return jjMoveStringLiteralDfa1_0(0x8L);
            case 103:
                return jjMoveStringLiteralDfa1_0(0x40L);
            case 105:
                return jjMoveStringLiteralDfa1_0(0x4L);
            case 108:
                return jjMoveStringLiteralDfa1_0(0x80L);
            case 117:
                return jjMoveStringLiteralDfa1_0(0x2L);
            case 119:
                return jjMoveStringLiteralDfa1_0(0x10L);
            case 123:
                return jjStopAtPos(0, 23);
            case 124:
                jjmatchedKind = 15;
                return jjMoveStringLiteralDfa1_0(0x10000L);
            case 125:
                return jjStopAtPos(0, 24);
            default:
                return jjMoveNfa_0(0, 0);
        }
    }

    private int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case 38:
                if ((active0 & 0x800L) != 0L)
                    return jjStartNfaWithStates_0(1, 11, 84);
                break;
            case 50:
                return jjMoveStringLiteralDfa2_0(active0, 0xa0000000L);
            case 60:
                if ((active0 & 0x40000L) != 0L)
                    return jjStopAtPos(1, 18);
                else if ((active0 & 0x8000000L) != 0L)
                    return jjStopAtPos(1, 27);
                break;
            case 61:
                if ((active0 & 0x80000L) != 0L)
                    return jjStopAtPos(1, 19);
                else if ((active0 & 0x400000L) != 0L)
                    return jjStopAtPos(1, 22);
                return jjMoveStringLiteralDfa2_0(active0, 0x1000L);
            case 62:
                if ((active0 & 0x200000L) != 0L)
                    return jjStopAtPos(1, 21);
                break;
            case 64:
                if ((active0 & 0x4000L) != 0L)
                    return jjStartNfaWithStates_0(1, 14, 84);
                break;
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x80L);
            case 102:
                if ((active0 & 0x4L) != 0L)
                    return jjStartNfaWithStates_0(1, 2, 84);
                break;
            case 104:
                return jjMoveStringLiteralDfa2_0(active0, 0x10L);
            case 108:
                return jjMoveStringLiteralDfa2_0(active0, 0x8L);
            case 111:
                return jjMoveStringLiteralDfa2_0(active0, 0x40L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0x20L);
            case 115:
                return jjMoveStringLiteralDfa2_0(active0, 0x2L);
            case 124:
                if ((active0 & 0x10000L) != 0L)
                    return jjStartNfaWithStates_0(1, 16, 84);
                break;
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(0, old0);
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
            case 62:
                if ((active0 & 0x1000L) != 0L)
                    return jjStopAtPos(2, 12);
                else if ((active0 & 0x80000000L) != 0L) {
                    jjmatchedKind = 31;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
            case 98:
                return jjMoveStringLiteralDfa3_0(active0, 0x80L);
            case 101:
                return jjMoveStringLiteralDfa3_0(active0, 0x20L);
            case 105:
                return jjMoveStringLiteralDfa3_0(active0, 0x12L);
            case 115:
                return jjMoveStringLiteralDfa3_0(active0, 0x8L);
            case 116:
                return jjMoveStringLiteralDfa3_0(active0, 0x40L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(1, old0);
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
            case 62:
                if ((active0 & 0x20000000L) != 0L)
                    return jjStopAtPos(3, 29);
                break;
            case 97:
                return jjMoveStringLiteralDfa4_0(active0, 0x20L);
            case 101:
                if ((active0 & 0x8L) != 0L)
                    return jjStartNfaWithStates_0(3, 3, 84);
                return jjMoveStringLiteralDfa4_0(active0, 0x80L);
            case 108:
                return jjMoveStringLiteralDfa4_0(active0, 0x10L);
            case 110:
                return jjMoveStringLiteralDfa4_0(active0, 0x2L);
            case 111:
                if ((active0 & 0x40L) != 0L)
                    return jjStartNfaWithStates_0(3, 6, 84);
                break;
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L)
            return jjStartNfa_0(2, old0);
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar) {
            case 101:
                if ((active0 & 0x10L) != 0L)
                    return jjStartNfaWithStates_0(4, 4, 84);
                break;
            case 103:
                if ((active0 & 0x2L) != 0L)
                    return jjStartNfaWithStates_0(4, 1, 84);
                break;
            case 107:
                if ((active0 & 0x20L) != 0L)
                    return jjStartNfaWithStates_0(4, 5, 84);
                break;
            case 108:
                if ((active0 & 0x80L) != 0L)
                    return jjStartNfaWithStates_0(4, 7, 84);
                break;
            default:
                break;
        }
        return jjStartNfa_0(3, active0);
    }

    private int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        }
        catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    static final long[] jjbitVec0 = {
            0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };

    private int jjMoveNfa_0(int startState, int curPos) {
        int startsAt = 0;
        jjnewStateCnt = 84;
        int i = 1;
        jjstateSet[0] = startState;
        int kind = 0x7fffffff;
        for (; ;) {
            if (++jjround == 0x7fffffff)
                ReInitRounds();
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x8bfffc7cffffd9ffL & l) != 0L) {
                                if (kind > 37)
                                    kind = 37;
                                jjCheckNAddTwoStates(44, 45);
                            } else if (curChar == 39)
                                jjCheckNAddStates(0, 2);
                            if (curChar == 38)
                                jjCheckNAddStates(3, 6);
                            else if (curChar == 47)
                                jjAddStates(7, 8);
                            else if (curChar == 35)
                                jjCheckNAddTwoStates(56, 57);
                            else if (curChar == 36)
                                jjstateSet[jjnewStateCnt++] = 39;
                            else if (curChar == 34)
                                jjCheckNAddStates(9, 11);
                            break;
                        case 80:
                            if ((0x8bfffc7cffffd9ffL & l) != 0L) {
                                if (kind > 37)
                                    kind = 37;
                                jjCheckNAddTwoStates(44, 45);
                            } else if (curChar == 62) {
                                if (kind > 30)
                                    kind = 30;
                            }
                            if (curChar == 49)
                                jjCheckNAdd(82);
                            else if (curChar == 62)
                                jjCheckNAdd(78);
                            if (curChar == 49)
                                jjstateSet[jjnewStateCnt++] = 79;
                            break;
                        case 84:
                        case 44:
                            if ((0x8bfffc7cffffd9ffL & l) == 0L)
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAddTwoStates(44, 45);
                            break;
                        case 1:
                            if ((0xfffffffbffffdbffL & l) != 0L)
                                jjCheckNAddStates(9, 11);
                            break;
                        case 3:
                            if ((0x8000008400000000L & l) != 0L)
                                jjCheckNAddStates(9, 11);
                            break;
                        case 4:
                            if (curChar == 34 && kind > 33)
                                kind = 33;
                            break;
                        case 5:
                            if (curChar == 48)
                                jjCheckNAddStates(12, 15);
                            break;
                        case 6:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(12, 15);
                            break;
                        case 7:
                            if ((0x3fe000000000000L & l) != 0L)
                                jjCheckNAddStates(16, 19);
                            break;
                        case 8:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(16, 19);
                            break;
                        case 9:
                            if (curChar == 48)
                                jjAddStates(20, 21);
                            break;
                        case 11:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(22, 25);
                            break;
                        case 13:
                            if (curChar == 39)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 14:
                            if ((0xffffff7fffffdbffL & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 16:
                            if ((0x8000008400000000L & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 17:
                            if (curChar == 39 && kind > 34)
                                kind = 34;
                            break;
                        case 18:
                            if (curChar == 48)
                                jjCheckNAddStates(26, 29);
                            break;
                        case 19:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(26, 29);
                            break;
                        case 20:
                            if ((0x3fe000000000000L & l) != 0L)
                                jjCheckNAddStates(30, 33);
                            break;
                        case 21:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(30, 33);
                            break;
                        case 22:
                            if (curChar == 48)
                                jjAddStates(34, 35);
                            break;
                        case 24:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(36, 39);
                            break;
                        case 27:
                            if ((0xffffffffffffdbffL & l) != 0L)
                                jjCheckNAddStates(40, 42);
                            break;
                        case 29:
                            if ((0x8000008400000000L & l) != 0L)
                                jjCheckNAddStates(40, 42);
                            break;
                        case 31:
                            if (curChar == 48)
                                jjCheckNAddStates(43, 46);
                            break;
                        case 32:
                            if ((0xff000000000000L & l) != 0L)
                                jjCheckNAddStates(43, 46);
                            break;
                        case 33:
                            if ((0x3fe000000000000L & l) != 0L)
                                jjCheckNAddStates(47, 50);
                            break;
                        case 34:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(47, 50);
                            break;
                        case 35:
                            if (curChar == 48)
                                jjAddStates(51, 52);
                            break;
                        case 37:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(53, 56);
                            break;
                        case 41:
                            if ((0x3ff400000000000L & l) != 0L)
                                jjAddStates(57, 58);
                            break;
                        case 43:
                            if (curChar == 36)
                                jjstateSet[jjnewStateCnt++] = 39;
                            break;
                        case 46:
                            if ((0x8000008500000000L & l) == 0L)
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAddTwoStates(44, 45);
                            break;
                        case 47:
                            if (curChar != 48)
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAddStates(59, 61);
                            break;
                        case 48:
                            if ((0xff000000000000L & l) == 0L)
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAddStates(59, 61);
                            break;
                        case 49:
                            if ((0x3fe000000000000L & l) == 0L)
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAddStates(62, 64);
                            break;
                        case 50:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAddStates(62, 64);
                            break;
                        case 51:
                            if (curChar == 48)
                                jjAddStates(65, 66);
                            break;
                        case 53:
                            if ((0x3ff000000000000L & l) == 0L)
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAddStates(67, 69);
                            break;
                        case 55:
                            if (curChar == 35)
                                jjCheckNAddTwoStates(56, 57);
                            break;
                        case 56:
                            if ((0x100000200L & l) != 0L)
                                jjCheckNAddTwoStates(56, 57);
                            break;
                        case 57:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(70, 73);
                            break;
                        case 58:
                            if ((0x100000200L & l) != 0L)
                                jjCheckNAddTwoStates(58, 59);
                            break;
                        case 59:
                            if (curChar == 34)
                                jjCheckNAdd(60);
                            break;
                        case 60:
                            if ((0xfffffffbffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(60, 61);
                            break;
                        case 61:
                            if (curChar == 34)
                                jjCheckNAddStates(74, 76);
                            break;
                        case 62:
                            if (curChar == 10 && kind > 42)
                                kind = 42;
                            break;
                        case 63:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddStates(77, 80);
                            break;
                        case 64:
                            if ((0x100000200L & l) != 0L)
                                jjCheckNAddStates(81, 83);
                            break;
                        case 65:
                            if ((0x3ff000000000000L & l) != 0L)
                                jjCheckNAddTwoStates(65, 62);
                            break;
                        case 66:
                            if ((0x100000200L & l) != 0L)
                                jjCheckNAddStates(84, 88);
                            break;
                        case 67:
                            if (curChar == 47)
                                jjAddStates(7, 8);
                            break;
                        case 68:
                            if (curChar == 47)
                                jjCheckNAddTwoStates(69, 70);
                            break;
                        case 69:
                            if ((0xfffffffffffffbffL & l) != 0L)
                                jjCheckNAddTwoStates(69, 70);
                            break;
                        case 70:
                            if (curChar == 10 && kind > 40)
                                kind = 40;
                            break;
                        case 71:
                            if (curChar == 42)
                                jjCheckNAddTwoStates(72, 73);
                            break;
                        case 72:
                            if ((0xfffffbffffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(72, 73);
                            break;
                        case 73:
                            if (curChar == 42)
                                jjAddStates(89, 90);
                            break;
                        case 74:
                            if ((0xffff7fffffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(75, 73);
                            break;
                        case 75:
                            if ((0xfffffbffffffffffL & l) != 0L)
                                jjCheckNAddTwoStates(75, 73);
                            break;
                        case 76:
                            if (curChar == 47 && kind > 41)
                                kind = 41;
                            break;
                        case 77:
                            if (curChar == 38)
                                jjCheckNAddStates(3, 6);
                            break;
                        case 78:
                            if (curChar == 62 && kind > 28)
                                kind = 28;
                            break;
                        case 79:
                            if (curChar == 62)
                                jjCheckNAdd(78);
                            break;
                        case 81:
                            if (curChar == 62)
                                jjCheckNAdd(78);
                            break;
                        case 82:
                            if (curChar == 62 && kind > 30)
                                kind = 30;
                            break;
                        case 83:
                            if (curChar == 49)
                                jjCheckNAdd(82);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0xd7fffffec7ffffffL & l) != 0L) {
                                if (kind > 37)
                                    kind = 37;
                                jjCheckNAddTwoStates(44, 45);
                            } else if (curChar == 92)
                                jjAddStates(91, 94);
                            else if (curChar == 96)
                                jjCheckNAddStates(40, 42);
                            break;
                        case 80:
                            if ((0xd7fffffec7ffffffL & l) != 0L) {
                                if (kind > 37)
                                    kind = 37;
                                jjCheckNAddTwoStates(44, 45);
                            } else if (curChar == 92)
                                jjAddStates(91, 94);
                            break;
                        case 84:
                            if ((0xd7fffffec7ffffffL & l) != 0L) {
                                if (kind > 37)
                                    kind = 37;
                                jjCheckNAddTwoStates(44, 45);
                            } else if (curChar == 92)
                                jjAddStates(91, 94);
                            break;
                        case 1:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(9, 11);
                            break;
                        case 2:
                            if (curChar == 92)
                                jjAddStates(95, 98);
                            break;
                        case 3:
                            if ((0x54404610000000L & l) != 0L)
                                jjCheckNAddStates(9, 11);
                            break;
                        case 10:
                            if (curChar == 120)
                                jjCheckNAdd(11);
                            break;
                        case 11:
                            if ((0x7e0000007eL & l) != 0L)
                                jjCheckNAddStates(22, 25);
                            break;
                        case 12:
                            if (curChar == 88)
                                jjCheckNAdd(11);
                            break;
                        case 14:
                            if ((0xffffffffefffffffL & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 15:
                            if (curChar == 92)
                                jjAddStates(99, 102);
                            break;
                        case 16:
                            if ((0x54404610000000L & l) != 0L)
                                jjCheckNAddStates(0, 2);
                            break;
                        case 23:
                            if (curChar == 120)
                                jjCheckNAdd(24);
                            break;
                        case 24:
                            if ((0x7e0000007eL & l) != 0L)
                                jjCheckNAddStates(36, 39);
                            break;
                        case 25:
                            if (curChar == 88)
                                jjCheckNAdd(24);
                            break;
                        case 26:
                            if (curChar == 96)
                                jjCheckNAddStates(40, 42);
                            break;
                        case 27:
                            if ((0xfffffffeefffffffL & l) != 0L)
                                jjCheckNAddStates(40, 42);
                            break;
                        case 28:
                            if (curChar == 92)
                                jjAddStates(103, 106);
                            break;
                        case 29:
                            if ((0x54404610000000L & l) != 0L)
                                jjCheckNAddStates(40, 42);
                            break;
                        case 30:
                            if (curChar == 96 && kind > 35)
                                kind = 35;
                            break;
                        case 36:
                            if (curChar == 120)
                                jjCheckNAdd(37);
                            break;
                        case 37:
                            if ((0x7e0000007eL & l) != 0L)
                                jjCheckNAddStates(53, 56);
                            break;
                        case 38:
                            if (curChar == 88)
                                jjCheckNAdd(37);
                            break;
                        case 39:
                            if (curChar == 123)
                                jjstateSet[jjnewStateCnt++] = 40;
                            break;
                        case 40:
                            if ((0x7fffffe07fffffeL & l) != 0L)
                                jjCheckNAddTwoStates(41, 42);
                            break;
                        case 41:
                            if ((0x7fffffe87fffffeL & l) != 0L)
                                jjCheckNAddTwoStates(41, 42);
                            break;
                        case 42:
                            if (curChar == 125 && kind > 36)
                                kind = 36;
                            break;
                        case 44:
                            if ((0xd7fffffec7ffffffL & l) == 0L)
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAddTwoStates(44, 45);
                            break;
                        case 45:
                            if (curChar == 92)
                                jjAddStates(91, 94);
                            break;
                        case 46:
                            if ((0x54404610000000L & l) == 0L)
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAddTwoStates(44, 45);
                            break;
                        case 52:
                            if (curChar == 120)
                                jjCheckNAdd(53);
                            break;
                        case 53:
                            if ((0x7e0000007eL & l) == 0L)
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAddStates(67, 69);
                            break;
                        case 54:
                            if (curChar == 88)
                                jjCheckNAdd(53);
                            break;
                        case 60:
                            jjAddStates(107, 108);
                            break;
                        case 69:
                            jjAddStates(109, 110);
                            break;
                        case 72:
                            jjCheckNAddTwoStates(72, 73);
                            break;
                        case 74:
                        case 75:
                            jjCheckNAddTwoStates(75, 73);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                        case 44:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAddTwoStates(44, 45);
                            break;
                        case 80:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAddTwoStates(44, 45);
                            break;
                        case 84:
                            if ((jjbitVec0[i2] & l2) == 0L)
                                break;
                            if (kind > 37)
                                kind = 37;
                            jjCheckNAddTwoStates(44, 45);
                            break;
                        case 1:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjAddStates(9, 11);
                            break;
                        case 14:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjAddStates(0, 2);
                            break;
                        case 27:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjAddStates(40, 42);
                            break;
                        case 60:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjAddStates(107, 108);
                            break;
                        case 69:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjAddStates(109, 110);
                            break;
                        case 72:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjCheckNAddTwoStates(72, 73);
                            break;
                        case 74:
                        case 75:
                            if ((jjbitVec0[i2] & l2) != 0L)
                                jjCheckNAddTwoStates(75, 73);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 84 - (jjnewStateCnt = startsAt)))
                return curPos;
            try {
                curChar = input_stream.readChar();
            }
            catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = {
            14, 15, 17, 80, 81, 83, 82, 68, 71, 1, 2, 4, 1, 2, 6, 4,
            1, 2, 8, 4, 10, 12, 1, 2, 11, 4, 14, 15, 19, 17, 14, 15,
            21, 17, 23, 25, 14, 15, 24, 17, 27, 28, 30, 27, 28, 32, 30, 27,
            28, 34, 30, 36, 38, 27, 28, 37, 30, 41, 42, 44, 45, 48, 44, 45,
            50, 52, 54, 44, 45, 53, 57, 58, 59, 62, 62, 63, 66, 64, 65, 62,
            63, 64, 65, 62, 64, 65, 62, 63, 66, 74, 76, 46, 47, 49, 51, 3,
            5, 7, 9, 16, 18, 20, 22, 29, 31, 33, 35, 60, 61, 69, 70,
    };

    /**
     * Token literal values.
     */
    public static final String[] jjstrLiteralImages = {
            "", "\165\163\151\156\147", "\151\146", "\145\154\163\145",
            "\167\150\151\154\145", "\142\162\145\141\153", "\147\157\164\157", "\154\141\142\145\154", "\75",
            "\73", "\46", "\46\46", "\75\75\76", "\100", "\100\100", "\174", "\174\174", "\74",
            "\74\74", "\74\75", "\76", "\76\76", "\76\75", "\173", "\175", "\50", "\51", "\46\74",
            null, "\46\62\76\76", null, "\46\62\76", "\12", null, null, null, null, null, null,
            null, null, null, null,};

    /**
     * Lexer state names.
     */
    public static final String[] lexStateNames = {
            "DEFAULT",
    };
    static final long[] jjtoToken = {
            0x3fffffffffL,
    };
    static final long[] jjtoSkip = {
            0x7c000000000L,
    };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[84];
    private final int[] jjstateSet = new int[168];
    protected char curChar;

    /**
     * Constructor.
     */
    public DShellParserImplTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        input_stream = stream;
    }

    /**
     * Constructor.
     */
    public DShellParserImplTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 84; i-- > 0;)
            jjrounds[i] = 0x80000000;
    }

    /**
     * Reinitialise parser.
     */
    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    /**
     * Switch to specified lex state.
     */
    public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0)
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
        else
            curLexState = lexState;
    }

    protected Token jjFillToken() {
        final Token t;
        final String curTokenImage;
        final int beginLine;
        final int endLine;
        final int beginColumn;
        final int endColumn;
        String im = jjstrLiteralImages[jjmatchedKind];
        curTokenImage = (im == null) ? input_stream.GetImage() : im;
        beginLine = input_stream.getBeginLine();
        beginColumn = input_stream.getBeginColumn();
        endLine = input_stream.getEndLine();
        endColumn = input_stream.getEndColumn();
        t = Token.newToken(jjmatchedKind, curTokenImage);

        t.beginLine = beginLine;
        t.endLine = endLine;
        t.beginColumn = beginColumn;
        t.endColumn = endColumn;

        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    /**
     * Get the next Token.
     */
    public Token getNextToken() {
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ;) {
            try {
                curChar = input_stream.BeginToken();
            }
            catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            try {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100000200L & (1L << curChar)) != 0L)
                    curChar = input_stream.BeginToken();
            }
            catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos)
                    input_stream.backup(curPos - jjmatchedPos - 1);
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            }
            catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else
                    error_column++;
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
        }
    }

    private void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

}
